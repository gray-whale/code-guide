import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.cb6f4a00.js";const m=JSON.parse('{"title":"提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/commit.md","filePath":"guide/commit.md","lastUpdated":1698596721000}'),e={name:"guide/commit.md"},p=l(`<h1 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-label="Permalink to &quot;提交规范&quot;">​</a></h1><blockquote><p>约定式提交：一种用于给提交信息增加人机可读含义的规范</p></blockquote><p>约定式提交规范是一种基于提交信息的轻量级约定。 它提供了一组简单规则来创建清晰的提交历史； 这更有利于编写自动化工具。 通过在提交信息中描述功能、修复和破坏性变更， 使这种惯例与 SemVer 相互对应。</p><p>原文：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">&gt;[optional scope]: &lt;</span><span style="color:#85E89D;">description</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[optional body]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[optional footer(s)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">type</span><span style="color:#24292E;">&gt;[optional scope]: &lt;</span><span style="color:#22863A;">description</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[optional body]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[optional footer(s)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>译文：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">类型</span><span style="color:#E1E4E8;">&gt;[可选 范围]: &lt;</span><span style="color:#79B8FF;">描述</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[可选 正文]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[可选 脚注]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">类型</span><span style="color:#24292E;">&gt;[可选 范围]: &lt;</span><span style="color:#005CC5;">描述</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[可选 正文]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[可选 脚注]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><ol><li>fix: 类型 为 fix 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）。</li><li>feat: 类型 为 feat 的提交表示在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）。</li><li>BREAKING CHANGE: 在脚注中包含 BREAKING CHANGE: 或 &lt;类型&gt;(范围) 后面有一个 ! 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意 类型 提交的一部分。</li><li>除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 <code>@commitlint/config-conventional</code>（基于 Angular 约定）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。 <ul><li>build: 用于修改项目构建系统，例如修改依赖库、外部接口或者升级 Node 版本等；</li><li>chore: 用于对非业务性代码进行修改，例如修改构建流程或者工具配置等；</li><li>ci: 用于修改持续集成流程，例如修改 Travis、Jenkins 等工作流配置；</li><li>docs: 用于修改文档，例如修改 README 文件、API 文档等；</li><li>style: 用于修改代码的样式，例如调整缩进、空格、空行等；</li><li>refactor: 用于重构代码，例如修改代码结构、变量名、函数名等但不修改功能逻辑；</li><li>perf: 用于优化性能，例如提升代码的性能、减少内存占用等；</li><li>test: 用于修改测试用例，例如添加、删除、修改代码的测试用例等。</li></ul></li><li>脚注中除了 BREAKING CHANGE: <code>&lt;description&gt;</code> ，其它条目应该采用类似 git trailer format 这样的惯例。</li></ol><p>其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。 可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 feat(parser): adds ability to parse arrays.。</p><h2 id="为什么使用约定式提交" tabindex="-1">为什么使用约定式提交 <a class="header-anchor" href="#为什么使用约定式提交" aria-label="Permalink to &quot;为什么使用约定式提交&quot;">​</a></h2><ul><li>自动化生成 CHANGELOG。</li><li>基于提交的类型，自动决定语义化的版本变更。</li><li>向同事、公众与其他利益关系者传达变化的性质。</li><li>触发构建和部署流程。</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>来自于：<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noreferrer">约定式提交</a></p></div>`,13),o=[p];function i(t,c,r,d,E,u){return a(),n("div",null,o)}const y=s(e,[["render",i]]);export{m as __pageData,y as default};
